// Code generated by go-swagger; DO NOT EDIT.

package chart_repository

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new chart repository API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for chart repository API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteChartrepoRepoChartsName(params *DeleteChartrepoRepoChartsNameParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteChartrepoRepoChartsNameOK, error)

	DeleteChartrepoRepoChartsNameVersion(params *DeleteChartrepoRepoChartsNameVersionParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteChartrepoRepoChartsNameVersionOK, error)

	GetChartrepoHealth(params *GetChartrepoHealthParams, authInfo runtime.ClientAuthInfoWriter) (*GetChartrepoHealthOK, error)

	GetChartrepoRepoCharts(params *GetChartrepoRepoChartsParams, authInfo runtime.ClientAuthInfoWriter) (*GetChartrepoRepoChartsOK, error)

	GetChartrepoRepoChartsName(params *GetChartrepoRepoChartsNameParams, authInfo runtime.ClientAuthInfoWriter) (*GetChartrepoRepoChartsNameOK, error)

	GetChartrepoRepoChartsNameVersion(params *GetChartrepoRepoChartsNameVersionParams, authInfo runtime.ClientAuthInfoWriter) (*GetChartrepoRepoChartsNameVersionOK, error)

	PostChartrepoCharts(params *PostChartrepoChartsParams, authInfo runtime.ClientAuthInfoWriter) (*PostChartrepoChartsCreated, error)

	PostChartrepoRepoCharts(params *PostChartrepoRepoChartsParams, authInfo runtime.ClientAuthInfoWriter) (*PostChartrepoRepoChartsCreated, error)

	PostChartrepoRepoProv(params *PostChartrepoRepoProvParams, authInfo runtime.ClientAuthInfoWriter) (*PostChartrepoRepoProvCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteChartrepoRepoChartsName deletes all the versions of the specified chart

  Delete all the versions of the specified chart
*/
func (a *Client) DeleteChartrepoRepoChartsName(params *DeleteChartrepoRepoChartsNameParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteChartrepoRepoChartsNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteChartrepoRepoChartsNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteChartrepoRepoChartsName",
		Method:             "DELETE",
		PathPattern:        "/chartrepo/{repo}/charts/{name}",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteChartrepoRepoChartsNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteChartrepoRepoChartsNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteChartrepoRepoChartsName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteChartrepoRepoChartsNameVersion deletes the specified chart version

  Delete the specified chart version
*/
func (a *Client) DeleteChartrepoRepoChartsNameVersion(params *DeleteChartrepoRepoChartsNameVersionParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteChartrepoRepoChartsNameVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteChartrepoRepoChartsNameVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteChartrepoRepoChartsNameVersion",
		Method:             "DELETE",
		PathPattern:        "/chartrepo/{repo}/charts/{name}/{version}",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteChartrepoRepoChartsNameVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteChartrepoRepoChartsNameVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteChartrepoRepoChartsNameVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetChartrepoHealth checks the health of chart repository service

  Check the health of chart repository service.
*/
func (a *Client) GetChartrepoHealth(params *GetChartrepoHealthParams, authInfo runtime.ClientAuthInfoWriter) (*GetChartrepoHealthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetChartrepoHealthParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetChartrepoHealth",
		Method:             "GET",
		PathPattern:        "/chartrepo/health",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetChartrepoHealthReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetChartrepoHealthOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetChartrepoHealth: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetChartrepoRepoCharts gets all the charts under the specified project

  Get all the charts under the specified project
*/
func (a *Client) GetChartrepoRepoCharts(params *GetChartrepoRepoChartsParams, authInfo runtime.ClientAuthInfoWriter) (*GetChartrepoRepoChartsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetChartrepoRepoChartsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetChartrepoRepoCharts",
		Method:             "GET",
		PathPattern:        "/chartrepo/{repo}/charts",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetChartrepoRepoChartsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetChartrepoRepoChartsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetChartrepoRepoCharts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetChartrepoRepoChartsName gets all the versions of the specified chart

  Get all the versions of the specified chart
*/
func (a *Client) GetChartrepoRepoChartsName(params *GetChartrepoRepoChartsNameParams, authInfo runtime.ClientAuthInfoWriter) (*GetChartrepoRepoChartsNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetChartrepoRepoChartsNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetChartrepoRepoChartsName",
		Method:             "GET",
		PathPattern:        "/chartrepo/{repo}/charts/{name}",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetChartrepoRepoChartsNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetChartrepoRepoChartsNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetChartrepoRepoChartsName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetChartrepoRepoChartsNameVersion gets the specified chart version

  Get the specified chart version
*/
func (a *Client) GetChartrepoRepoChartsNameVersion(params *GetChartrepoRepoChartsNameVersionParams, authInfo runtime.ClientAuthInfoWriter) (*GetChartrepoRepoChartsNameVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetChartrepoRepoChartsNameVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetChartrepoRepoChartsNameVersion",
		Method:             "GET",
		PathPattern:        "/chartrepo/{repo}/charts/{name}/{version}",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetChartrepoRepoChartsNameVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetChartrepoRepoChartsNameVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetChartrepoRepoChartsNameVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostChartrepoCharts uploads a chart file to the defult library project

  Upload a chart file to the default 'library' project. Uploading together with the prov file at the same time is also supported.
*/
func (a *Client) PostChartrepoCharts(params *PostChartrepoChartsParams, authInfo runtime.ClientAuthInfoWriter) (*PostChartrepoChartsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostChartrepoChartsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostChartrepoCharts",
		Method:             "POST",
		PathPattern:        "/chartrepo/charts",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostChartrepoChartsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostChartrepoChartsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostChartrepoCharts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostChartrepoRepoCharts uploads a chart file to the specified project

  Upload a chart file to the specified project. With this API, the corresponding provance file can be uploaded together with chart file at once.
*/
func (a *Client) PostChartrepoRepoCharts(params *PostChartrepoRepoChartsParams, authInfo runtime.ClientAuthInfoWriter) (*PostChartrepoRepoChartsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostChartrepoRepoChartsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostChartrepoRepoCharts",
		Method:             "POST",
		PathPattern:        "/chartrepo/{repo}/charts",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostChartrepoRepoChartsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostChartrepoRepoChartsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostChartrepoRepoCharts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostChartrepoRepoProv uploads a provance file to the specified project

  Upload a provance file to the specified project. The provance file should be targeted for an existing chart file.
*/
func (a *Client) PostChartrepoRepoProv(params *PostChartrepoRepoProvParams, authInfo runtime.ClientAuthInfoWriter) (*PostChartrepoRepoProvCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostChartrepoRepoProvParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostChartrepoRepoProv",
		Method:             "POST",
		PathPattern:        "/chartrepo/{repo}/prov",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostChartrepoRepoProvReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostChartrepoRepoProvCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostChartrepoRepoProv: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
